#
# Copyright (C) 2011-2017 Micael Oliveira <micael.oliveira@mpsd.mpg.de>
#                         Yann Pouillon <devops@materialsevolution.es>
#
# This file is part of Libpspio.
#
# This Source Code Form is subject to the terms of the Mozilla Public License,
# version 2.0. If a copy of the MPL was not distributed with this file, You can
# obtain one at https://mozilla.org/MPL/2.0/.
#
# Libpspio is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the Mozilla Public License version 2.0 for more
# details.

# ---------------------------------------------------------------------------- #

#
# IMPORTANT NOTE
#
# Please DO NOT EDIT this file unless you REALLY know what you are doing.
# Everything is important, in particular the order of the various commands
# executed here. YOU HAVE BEEN WARNED !
#

# ---------------------------------------------------------------------------- #

#
# Autotools startup
#

# Initialize Autoconf
AC_PREREQ(2.62)
AC_INIT([Libpspio-Fortran], [0.2.4],
  [https://bugs.launchpad.net/libpspio/], [libpspio-fortran])
AC_REVISION([Autotools support for Libpspio-Fortran])
AC_CONFIG_AUX_DIR([config/gnu])
AC_CONFIG_MACRO_DIR([config/m4])
AC_CONFIG_SRCDIR([.])
_AC_SRCDIRS(["."])

# Initialize Automake
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE([1.10 parallel-tests color-tests])
AM_CONFIG_HEADER([config.h])

# ---------------------------------------------------------------------------- #

#
# Define global options
#

# Debugging
# FIXME: disable debug by default when releasing
AC_ARG_ENABLE([debug],
  AC_HELP_STRING([--enable-debug],
    [Enable debug mode (default: enabled)]),
  [],
  [enable_debug="yes"])
AC_SUBST(enable_debug)

# GCOV - Optional support
AC_ARG_ENABLE([gcov],
  AC_HELP_STRING([--enable-gcov],
    [Enable code coverage (default: disabled)]),
  [],
  [enable_gcov="no"])
AC_SUBST(enable_gcov)

# Memory profiling - Optional support
AC_ARG_ENABLE([memprof],
  AC_HELP_STRING([--enable-memprof],
    [Enable memory profiling (default: disabled)]),
  [],
  [enable_memprof="no"])
AC_SUBST(enable_memprof)

                    # ------------------------------------ #

# Libpspio prefix
AC_ARG_WITH([pspio],
  AC_HELP_STRING([--with-pspio],
    [Install prefix of Libpspio]))

# Libpspio includes
AC_ARG_WITH([pspio-incs],
  AC_HELP_STRING([--with-pspio-incs],
    [Include flags for Libpspio]))

# Libpspio libraries
AC_ARG_WITH([pspio-libs],
  AC_HELP_STRING([--with-pspio-libs],
    [Library flags for Libpspio]))

# ---------------------------------------------------------------------------- #

#
# Option consistency checking
#

if test "${with_pspio}" != ""; then
  if test "${with_pspio_incs}" != ""; then
    AC_MSG_ERROR([please use '--with-pspio' or '--with-pspio-incs', not both])
  fi
  if test "${with_pspio_libs}" != ""; then
    AC_MSG_ERROR([please use '--with-pspio' or '--with-pspio-libs', not both])
  fi
fi

# ---------------------------------------------------------------------------- #

#
# Startup
#

# Check for common programs
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_SED
AC_PROG_AWK
AC_PROG_GREP

# Workaround for the "grep -e" issue on Solaris systems
AC_PROG_EGREP

# Workaround for the wrong path to install-sh on Mac systems
AX_PROG_MKDIR_P

# Init variables
pio_core_incs=""
AC_SUBST(pio_core_incs)

# ---------------------------------------------------------------------------- #

#
# Languages
#

# Look for the C compiler
if test "${CC}" != "" -a ! -x "${CC}"; then
  pio_cc_probe=`echo "${CC}" | sed -e 's/ .*//'`
  if test ! -x "${pio_cc_probe}"; then
    AC_PATH_PROG([pio_cc_path],[${pio_cc_probe}])
    if test "${pio_cc_path}" = ""; then
      AC_MSG_ERROR([could not run C compiler "${CC}"])
    fi
  fi
fi
AC_PROG_CC
AC_PROG_CPP

                    # ------------------------------------ #

# Look for the Fortran compiler
if test "${FC}" != "" -a ! -x "${FC}"; then
  pio_fc_probe=`echo "${FC}" | sed -e 's/ .*//'`
  if test ! -x "${pio_fc_probe}"; then
    AC_PATH_PROG([pio_fc_path], [${pio_fc_probe}])
    if test "${pio_fc_path}" = ""; then
      AC_MSG_ERROR([could not run Fortran compiler "${FC}"])
    fi
  fi
fi
AC_PROG_FC

# Enforce strict file extensions
pio_fc_src_ok="unknown"
AC_FC_SRCEXT([F90], [pio_fc_src_ok="yes"], [pio_fc_src_ok="no"])
if test "${pio_fc_src_ok}" != "yes"; then
  AC_MSG_WARN([Fortran file extension could not be changed])
  AC_MSG_WARN([Fortran tests may fail])
fi

# Look for the iso_c_binding module
pio_fc_iso_c_binding="unknown"
AC_MSG_CHECKING([for the iso_c_binding Fortran module])
AC_LANG_PUSH([Fortran])
AC_COMPILE_IFELSE(
  [AC_LANG_PROGRAM([], [[use iso_c_binding]])],
  [pio_fc_iso_c_binding="yes"],
  [pio_fc_iso_c_binding="no"])
AC_LANG_POP([Fortran])
AC_MSG_RESULT([${pio_fc_iso_c_binding}])
if test "${pio_fc_iso_c_binding}" != "yes"; then
  AC_MSG_ERROR([the Fortran compiler does not provide
                the iso_c_binding module
                This probably happens because this compiler
                is an antiquity
                Please disable Fortran support or use a modern
                Fortran compiler])
fi

# Fortran compiler peculiarities
AX_F90_MODULE_EXTENSION
AC_SUBST(ax_cv_f90_modext)
AX_F90_MODULE_CASE

# Language mixing
AC_FC_WRAPPERS

# Need to know the size of a Fortran integer
ACX_FC_INTEGER_SIZE
ACX_CC_FORTRAN_INT

                    # ------------------------------------ #

# Perl and Python
AC_PATH_PROGS([PERL], [perl perl6])
AC_PATH_PROGS([PYTHON], [python python2.7])

                    # ------------------------------------ #

# Inform Automake
AM_CONDITIONAL([F90_MOD_UPPERCASE],
  [test "${enable_fortran}" = "yes" -a "${ax_cv_f90_mod_uppercase}" = "yes"])

# ---------------------------------------------------------------------------- #

#
# Look for Libpspio
#

pio_pspio_ok="unknown"
AX_SEARCH_LIBPSPIO(0,0,0)

if test "${pio_pspio_ok}" != "yes"; then
  AC_MSG_ERROR([Libpspio not found])
fi

# ---------------------------------------------------------------------------- #

#
# Libtool (must be set once languages are known)
#

# Disable shared libraries when using gcov
# Note: may still be overridden from the command line
if test "${enable_gcov}" = "yes"; then
  AC_DISABLE_SHARED
fi

# Initialize Libtool
LT_INIT
LT_PREREQ([2.4])
LTOBJEXT="lo"
AC_SUBST(LTOBJEXT)

# ---------------------------------------------------------------------------- #

#
# Debugging
#

# Adjust verbosity
if test "${enable_debug}" = "yes"; then
  AC_DEFINE([DEBUG_MODE], 1,
    [Define to 1 if you want to enable debug mode.])
  AC_DEFINE([DEBUG_LEVEL], 1,
    [Set to 1 or above if you want to enable debug messages.])
else
  AC_DEFINE([DEBUG_LEVEL], 0,
    [Set to 1 or above if you want to enable debug messages.])
fi

# ---------------------------------------------------------------------------- #

#
# Profiling
#

# Memory profiling
if test "${enable_memprof}" = "yes"; then
  AC_CHECK_PROGS([VALGRIND], [valgrind])
  if test "${VALGRIND}" = ""; then
    AC_MSG_ERROR([memory profiling tool not found
      please install valgrind first to perform memory profiling])
  fi
fi

AM_CONDITIONAL([DO_CHECKMEM], [test "${enable_memprof}" = "yes"])

                    # ------------------------------------ #

# Code coverage
AC_MSG_CHECKING([whether to enable code coverage (GCC only)])
AC_MSG_RESULT([${enable_gcov}])

CFLAGS_COVERAGE=""
FCFLAGS_COVERAGE=""
LDFLAGS_COVERAGE=""
LIBS_COVERAGE=""

if test "${enable_gcov}" = "yes"; then
  if test "${ac_cv_c_compiler_gnu}" != "yes" -o \
          "${lt_cv_prog_gnu_ld}" != "yes"; then
    AC_MSG_ERROR([code coverage requires GNU compilers
      please re-run configure using GCC compilers for both C and Fortran])
  fi

  AC_CHECK_PROGS([GCOV], [gcov])
  if test "${GCOV}" = ""; then
    AC_MSG_ERROR([gcov not found
      please make sure that the gcov executable is in PATH])
  fi

  CFLAGS_COVERAGE="--coverage --no-inline"
  FCFLAGS_COVERAGE="--coverage --no-inline"
  LDFLAGS_COVERAGE="--coverage"
  LIBS_COVERAGE="-lgcov"
fi

AM_CONDITIONAL([DO_COVERAGE], [test "${enable_gcov}" = "yes"])

AC_SUBST(GCOV)
AC_SUBST(CFLAGS_COVERAGE)
AC_SUBST(FCFLAGS_COVERAGE)
AC_SUBST(LDFLAGS_COVERAGE)
AC_SUBST(LIBS_COVERAGE)

# ---------------------------------------------------------------------------- #

#
# Prepare data for the test suite
#

# Make data location available to check
AC_DEFINE_UNQUOTED([PSPIO_CHK_DATADIR],
  "${ac_abs_top_srcdir}/../psp_references",
  [Directory containing pseudopotential files for the tests.])

# Generate explicit dependencies for GCOV tests
tmp_gcov_test_mf="src/tests/gcov-fortran-tests-deps.mf"
if test "${enable_gcov}" = "yes"; then
  ${MKDIR_P} `dirname "${tmp_gcov_test_mf}"`
  echo "# Script-generated makefile targets for GCOV tests" \
    >"${tmp_gcov_test_mf}"
  for src in ${ac_top_srcdir}/src/test_*.F90; do
    if test -s "${src}"; then
      exe=`basename "${src}" | sed -e 's/\.F90//'`
      echo "" >>"${tmp_gcov_test_mf}"
      echo "${exe}.log: gcov_fortran_clean.log" >>"${tmp_gcov_test_mf}"
    fi
  done
  for src in ${ac_top_srcdir}/src/test_*.in; do
    if test -s "${src}"; then
      exe=`basename "${src}" | sed -e 's/\.in//'`
      echo "" >>"${tmp_gcov_test_mf}"
      echo "${exe}.log: gcov_fortran_clean.log" >>"${tmp_gcov_test_mf}"
    fi
  done
  echo "" >>"${tmp_gcov_test_mf}"
  echo "gcov_report.log: gcov_clean.log" >>"${tmp_gcov_test_mf}"
fi
unset tmp_gcov_test_mf

# ---------------------------------------------------------------------------- #

#
# Output configuration
#

AC_MSG_NOTICE([Debugging : ${enable_debug}])
AC_MSG_NOTICE([Profiling : ${enable_memprof}])
AC_MSG_NOTICE([Coverage  : ${enable_gcov}])
AC_MSG_NOTICE([])
AC_MSG_NOTICE([CPP      = ${CPP}])
AC_MSG_NOTICE([CPPFLAGS = ${CPPFLAGS}])
AC_MSG_NOTICE([CC       = ${CC}])
AC_MSG_NOTICE([CFLAGS   = ${CFLAGS}])
AC_MSG_NOTICE([FC       = ${FC}])
AC_MSG_NOTICE([FCFLAGS  = ${FCFLAGS}])
AC_MSG_NOTICE([LDFLAGS  = ${LDFLAGS}])
AC_MSG_NOTICE([LIBS     = ${LIBS}])

AC_CONFIG_COMMANDS([script-perms],
  [chmod u+x \
    src/tests/gcov_check_coverage \
    src/tests/gcov_fortran_clean \
    src/tests/gcov_fortran_report \
    src/tests/test_fortran_io_multiple \
    src/tests/test_fortran_memory])

AC_CONFIG_FILES([
  Makefile
  src/Makefile
  src/tests/Makefile
  src/tests/gcov_check_coverage
  src/tests/gcov_fortran_clean
  src/tests/gcov_fortran_report
  src/tests/test_fortran_io_multiple
  src/tests/test_fortran_memory])

AC_OUTPUT
