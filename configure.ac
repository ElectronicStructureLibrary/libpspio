#
# Copyright (C) 2011-2018 Micael Oliveira <micael.oliveira@mpsd.mpg.de>
#                         Yann Pouillon <devops@materialsevolution.es>
#
# This file is part of Libpspio.
#
# This Source Code Form is subject to the terms of the Mozilla Public License,
# version 2.0. If a copy of the MPL was not distributed with this file, You can
# obtain one at https://mozilla.org/MPL/2.0/.
#
# Libpspio is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the Mozilla Public License version 2.0 for more
# details.

# ---------------------------------------------------------------------------- #

#
# IMPORTANT NOTE
#
# Please DO NOT EDIT this file unless you REALLY know what you are doing.
# Everything is important, in particular the order of the various commands
# executed here. YOU HAVE BEEN WARNED !
#

# ---------------------------------------------------------------------------- #

#
# Autotools startup
#

# Initialize Autoconf
AC_PREREQ(2.62)
AC_INIT([Libpspio], [0.2.4],
  [https://bugs.launchpad.net/libpspio/], [libpspio])
AC_REVISION([Autotools support for Libpspio])
AC_CONFIG_AUX_DIR([config/gnu])
AC_CONFIG_MACRO_DIR([config/m4])
AC_CONFIG_SRCDIR([.])

# Initialize Automake
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE([1.10 parallel-tests color-tests])
AM_CONFIG_HEADER([config.h])

# ---------------------------------------------------------------------------- #

#
# Define global options
#

# Debugging
# FIXME: disable debug by default when releasing
AC_ARG_ENABLE([debug],
  AC_HELP_STRING([--enable-debug],
    [Enable debug mode (default: enabled)]),
  [],
  [enable_debug="yes"])
AC_SUBST(enable_debug)

# Fortran - Optional support
AC_ARG_ENABLE([fortran],
  AC_HELP_STRING([--enable-fortran],
    [Enable Fortran bindings (default: disabled)]),
  [],
  [enable_fortran="no"])
AC_SUBST(enable_fortran)

# GCOV - Optional support
AC_ARG_ENABLE([gcov],
  AC_HELP_STRING([--enable-gcov],
    [Enable code coverage (default: disabled)]),
  [],
  [enable_gcov="no"])
AC_SUBST(enable_gcov)

# GSL - Optional support (because of licensing issues)
AC_ARG_ENABLE([gsl],
  AC_HELP_STRING([--enable-gsl],
    [Enable support for GSL (default: enabled)]),
  [],
  [enable_gsl="yes"])
AC_ARG_WITH([gsl-incs],
  AC_HELP_STRING([--with-gsl-incs],
    [Includes for the GSL library]))
AC_ARG_WITH([gsl-libs],
  AC_HELP_STRING([--with-gsl-libs],
    [Link flags for the GSL library]))
AC_SUBST(enable_gsl)

# Memory profiling - Optional support
AC_ARG_ENABLE([memprof],
  AC_HELP_STRING([--enable-memprof],
    [Enable memory profiling (default: disabled)]),
  [],
  [enable_memprof="no"])
AC_SUBST(enable_memprof)

# XML - Optional support
AC_ARG_ENABLE([xml],
  AC_HELP_STRING([--enable-xml],
    [Enable support for XML (default: disabled)]),
  [],
  [enable_xml="no"])
AC_ARG_WITH([xml-incs],
  AC_HELP_STRING([--with-xml-incs],
    [Includes for the XML library]))
AC_ARG_WITH([xml-libs],
  AC_HELP_STRING([--with-xml-libs],
    [Link flags for the XML library]))
AC_SUBST(enable_xml)

# ---------------------------------------------------------------------------- #

#
# Startup
#

# Check for common programs
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_SED
AC_PROG_AWK
AC_PROG_GREP

# Workaround for the "grep -e" issue on Solaris systems
AC_PROG_EGREP

# Workaround for the wrong path to install-sh on Mac systems
AX_PROG_MKDIR_P

# Init variables
pio_core_incs=""
AC_SUBST(pio_core_incs)

# ---------------------------------------------------------------------------- #

#
# Languages
#

# Look for the C compiler
if test "${CC}" != "" -a ! -x "${CC}"; then
  pio_cc_probe=`echo "${CC}" | sed -e 's/ .*//'`
  if test ! -x "${pio_cc_probe}"; then
    AC_PATH_PROG([pio_cc_path],[${pio_cc_probe}])
    if test "${pio_cc_path}" = ""; then
      AC_MSG_ERROR([could not run C compiler "${CC}"])
    fi
  fi
fi
AC_PROG_CC
AC_PROG_CPP

# C compiler peculiarities
AM_PROG_CC_C_O

# Required headers
AC_CHECK_HEADERS([time.h])

# Required functions
AC_CHECK_FUNCS([strndup])

# Required libraries
pio_math_ok="unknown"
AC_SEARCH_LIBS([expl], [m ml], [pio_math_ok="yes"], [pio_math_ok="no"])
if test "${pio_math_ok}" != "yes"; then
  AC_MSG_WARN([math libraries do not provide double precision functions])
fi

# Unit test framework: the Check package
PIO_SEARCH_CHECK

                    # ------------------------------------ #

# Perl and Python
AC_PATH_PROGS([PERL], [perl perl6])
AC_PATH_PROGS([PYTHON], [python python2.7])

# ---------------------------------------------------------------------------- #

#
# Libtool (must be set once languages are known)
#

# Disable shared libraries when using gcov
# Note: may still be overridden from the command line
if test "${enable_gcov}" = "yes"; then
  AC_DISABLE_SHARED
fi

# Initialize Libtool
LT_INIT
LT_PREREQ([2.4])
LTOBJEXT="lo"
AC_SUBST(LTOBJEXT)

# ---------------------------------------------------------------------------- #

#
# Check that all required features are there
#

# GNU Scientific Library (optional)
if test "${enable_gsl}" = "yes"; then
  PIO_CHECK_GSL
  if test "${pio_gsl_ok}" = "yes"; then
    AC_DEFINE([HAVE_GSL], 1,
      [Define to 1 if you have GSL support.])
    CPPFLAGS="${CPPFLAGS} ${pio_gsl_incs}"
    LIBS="${pio_gsl_libs} ${LIBS}"
  else
    AC_ERROR([GSL support does not work])
  fi
fi

# Math libraries (if GSL is disabled)
if test "${enable_gsl}" = "no"; then
  AC_SEARCH_LIBS([exp], [m], [pio_math_ok="yes"], [pio_math_ok="no"], [])
  if test "${pio_math_ok}" = "no"; then
    AC_MSG_ERROR([no mathematical library found
      please set the LIBS environment variable adequately when configuring])
  fi
fi

# XML (optional)
if test "${enable_xml}" = "yes"; then
  PIO_CHECK_XML
  if test "${pio_xml_ok}" = "yes"; then
    AC_DEFINE([HAVE_XML], 1,
      [Define to 1 if you have XML support.])
    CPPFLAGS="${CPPFLAGS} ${pio_xml_incs}"
    LIBS="${pio_xml_libs} ${LIBS}"
  else
    AC_ERROR([XML support does not work])
  fi
fi

# ---------------------------------------------------------------------------- #

#
# Debugging
#

# Adjust verbosity
if test "${enable_debug}" = "yes"; then
  AC_DEFINE([DEBUG_MODE], 1,
    [Define to 1 if you want to enable debug mode.])
  AC_DEFINE([DEBUG_LEVEL], 1,
    [Set to 1 or above if you want to enable debug messages.])
else
  AC_DEFINE([DEBUG_LEVEL], 0,
    [Set to 1 or above if you want to enable debug messages.])
fi

# ---------------------------------------------------------------------------- #

#
# Instrumentation
#

# Memory profiling
if test "${enable_memprof}" = "yes"; then
  AC_CHECK_PROGS([VALGRIND], [valgrind])
  if test "${VALGRIND}" = ""; then
    AC_MSG_ERROR([memory profiling tool not found
      please install valgrind first to perform memory profiling])
  fi
fi

AM_CONDITIONAL([DO_CHECKMEM], [test "${enable_memprof}" = "yes"])

                    # ------------------------------------ #

# Code coverage
AC_MSG_CHECKING([whether to enable code coverage (GCC only)])
AC_MSG_RESULT([${enable_gcov}])

CFLAGS_COVERAGE=""
FCFLAGS_COVERAGE=""
LDFLAGS_COVERAGE=""
LIBS_COVERAGE=""

if test "${enable_gcov}" = "yes"; then
  if test "${ac_cv_c_compiler_gnu}" != "yes" -o \
          "${lt_cv_prog_gnu_ld}" != "yes"; then
    AC_MSG_ERROR([code coverage requires GNU compilers
      please re-run configure using GCC compilers])
  fi

  AC_CHECK_PROGS([GCOV], [gcov])
  if test "${GCOV}" = ""; then
    AC_MSG_ERROR([gcov not found
      please make sure that the gcov executable is in PATH])
  fi

  CFLAGS_COVERAGE="--coverage --no-inline"
  LDFLAGS_COVERAGE="--coverage"
  LIBS_COVERAGE="-lgcov"
fi

AM_CONDITIONAL([DO_COVERAGE], [test "${enable_gcov}" = "yes"])

AC_SUBST(GCOV)
AC_SUBST(CFLAGS_COVERAGE)
AC_SUBST(FCFLAGS_COVERAGE)
AC_SUBST(LDFLAGS_COVERAGE)
AC_SUBST(LIBS_COVERAGE)

# ---------------------------------------------------------------------------- #

#
# Prepare data for the test suite
#

# Make data location available to check
AC_DEFINE_UNQUOTED([PSPIO_CHK_DATADIR], "${ac_abs_top_srcdir}/psp_references",
  [Directory containing pseudopotential files for the tests.])

# Generate explicit dependencies for GCOV tests
if test "${enable_gcov}" = "yes"; then
  ${MKDIR_P} src
  echo "# Script-generated makefile targets for GCOV tests" \
    >src/gcov-tests-deps.mf
  for src in ${ac_top_srcdir}/src/check_*.c ${ac_top_srcdir}/src/test_*.c; do
    if test -s "${src}"; then
      exe=`basename "${src}" | sed -e 's/\.c//'`
      echo "" >>src/gcov-tests-deps.mf
      echo "${exe}.log: gcov_clean.log" >>src/gcov-tests-deps.mf
    fi
  done
  for src in ${ac_top_srcdir}/src/test_*.in; do
    if test -s "${src}"; then
      exe=`basename "${src}" | sed -e 's/\.in//'`
      echo "" >>src/gcov-tests-deps.mf
      echo "${exe}.log: gcov_clean.log" >>src/gcov-tests-deps.mf
    fi
  done
  echo "" >>src/gcov-tests-deps.mf
  echo "gcov_report.log: gcov_clean.log" >>src/gcov-tests-deps.mf
fi

# ---------------------------------------------------------------------------- #

#
# Fortran configuration
#

# Send Fortran status to pkg-config
pio_lib_f=""
if test "${enable_fortran}" = "yes"; then
  pio_lib_f="-lpspiof"
fi
AC_SUBST(pio_lib_f)

# ---------------------------------------------------------------------------- #

#
# Output configuration
#

AM_CONDITIONAL([DO_BUILD_FORTRAN], [test "${enable_fortran}" = "yes"])
AC_CONFIG_SUBDIRS([fortran])

AC_MSG_NOTICE([Fortran   : ${enable_fortran}])
AC_MSG_NOTICE([GSL       : ${enable_gsl}])
AC_MSG_NOTICE([XML       : ${enable_xml}])
AC_MSG_NOTICE([])
AC_MSG_NOTICE([Debugging : ${enable_debug}])
AC_MSG_NOTICE([Profiling : ${enable_memprof}])
AC_MSG_NOTICE([Coverage  : ${enable_gcov}])
AC_MSG_NOTICE([])
AC_MSG_NOTICE([CPP      = ${CPP}])
AC_MSG_NOTICE([CPPFLAGS = ${CPPFLAGS}])
AC_MSG_NOTICE([CC       = ${CC}])
AC_MSG_NOTICE([CFLAGS   = ${CFLAGS}])
AC_MSG_NOTICE([LDFLAGS  = ${LDFLAGS}])
AC_MSG_NOTICE([LIBS     = ${LIBS}])

AC_CONFIG_COMMANDS([script-perms],
  [chmod u+x \
    src/gcov_check_coverage \
    src/gcov_clean \
    src/gcov_report \
    src/test_memory \
    tests/run_test_format
  ])

AC_CONFIG_FILES([
  Makefile
  config/data/libpspio.pc
  config/data/libpspio-config.yml
  src/Makefile
  src/gcov_check_coverage
  src/gcov_clean
  src/gcov_report
  src/test_memory
  tests/Makefile
  tests/run_test_format])

AC_OUTPUT
